{\rtf1\ansi\ansicpg1250\deff0\deflang1045{\fonttbl{\f0\fnil\fcharset238 Calibri;}{\f1\fnil\fcharset0 Calibri;}}
{\*\generator Msftedit 5.41.21.2510;}\viewkind4\uc1\pard\sa200\sl276\slmult1\b\f0\fs40 1. System ERP i jego historia\par
\b0\fs24 1. System ERP s\'b3u\'bfy wspomaganiu zarz\'b9dzania przedsi\'eabiorstwem lub wsp\'f3\'b3dzia\'b3ania grupy wsp\'f3\'b3pracuj\'b9cych ze sob\'b9 przedsi\'eabiorstw, poprzez gromadzenie danych oraz umo\'bfliwienie wykonywania operacji na zebranych danych. Wspomaganie to mo\'bfe obejmowa\'e6 wszystkie lub cz\'ea\'9c\'e6 szczebli zarz\'b9dzania i u\'b3atwia optymalizacj\'ea wykorzystania zasob\'f3w przedsi\'eabiorstwa oraz zachodz\'b9cych w nim proces\'f3w.\par
Wyr\'f3\'bfniamy kilka rodzaj\'f3w system\'f3w ERP:\par
a) modu\'b3owe, tj. sk\'b3adaj\'b9 si\'ea z niezale\'bfnych od siebie cho\'e6 wsp\'f3\'b3pracuj\'b9cych ze sob\'b9 aplikacji.\par
b) zintegrowane, tj. sk\'b3adaj\'b9ce si\'ea z jednej bazy danych oraz jednej platformy biznesowej, gdzie nie wyst\'eapuje \'bfadna wymiana danych pomi\'eadzy modu\'b3ami, poniewa\'bf wszystkie funkcjonalno\'9cci korzystaj\'b9 z tych samych danych w czasie rzeczywistym. \par
\par
//dziwnie napisane, jaki\'9c wykres czy co\'9c\par
Systemy ERP s\'b9 rozwini\'eaciem system\'f3w MRP II, kt\'f3ry z kolei jest rozwini\'eaciem MRP  (ang. Material Requirements Planning) kt\'f3ry s\'b3u\'bfy\'b3 do planowania zapotrzebowania materia\'b3owego, wzbogaconym o modu\'b3 CRP czyli planowanie zdolno\'9cci produkcyjnych. \par
\fs22 2. \par
a) W czasach gdy przemys\'b3 nie by\'b3 zdominowany przez komputery u\'bfywano metod takich jak EOQ (economic order quantity). S\'b3u\'bfy\'b3y one do zarz\'b9dzania zapasami w \'b3a\'f1cuchu dostaw. Definiowa\'b3y one optymaln\'b9 warto\'9c\'e6 do zam\'f3wienia tak aby zminimalizowa\'e6   koszty zmienne.\par
b) Pierwszym powa\'bfnym systemem tego typu by\'b3 wprowadzony pod koniec lat 40'  Toyota Production System (TPS). By\'b3 on zbiorem unikatowych japo\'f1skich metod zarz\'b9dzania. Obejmowa\'b3 szerokie zasady kultury przyj\'eate w tej firmie, a tak\'bfe spos\'f3b postrzegania \'9cwiata i prowadzenia dzia\'b3alno\'9cci. System koncentrowa\'b3 si\'ea na organizacji produkcji i logistyki, wliczaj\'b9c w to pozytywne relacje z dostawcami i klientami. TPS by\'b3 konglomeratem wielu technik, koncepcji i zasad maj\'b9cych na celu eliminacj\'ea 3M (tj. muri \endash  nadwyr\'ea\'bfenie i trudno\'9cci, mura \endash  nieregularno\'9c\'e6, muda \endash  marnotrawstwo). \par
c) Stworzony w 1964 przez  Josepha Orlicky'ego MRP by\'b3 odpowiedzi\'b9  dla systemu Toyota Manufacturing Program. Pierwsz\'b9 firm\'b9 w kt\'f3rej zosta\'b3 wprowadzony by\'b3a Black & Decker. Z czasem liczba firm wzros\'b3a do 700 w 1975 roku, a w 1981 roku do 8 000. S\'b3u\'bfy\'b3 on do wyznaczania zapotrzebowa\'f1 na zasoby materia\'b3owe (surowce, materia\'b3y, komponenty itp.). Za jego pomoc\'b9 mo\'bfna by\'b3o obliczy\'e6 dok\'b3adn\'b9 ilo\'9c\'e6 materia\'b3\'f3w i terminarz dostaw w taki spos\'f3b, by sprosta\'e6 ci\'b9gle zmieniaj\'b9cemu si\'ea popytowi na poszczeg\'f3lne produkty.\par
Jego g\'b3\'f3wnymi za\'b3o\'bfeniemi by\'b3y: //tu podpunkty zrobi\'e6\par
\lang1033\f1 redukcja zapas\'f3w\par
dok\lang1045\f0\'b3adne okre\'9clenie czas\'f3w dostaw surowc\'f3w i p\'f3\'b3produkt\'f3w\par
dok\'b3adne wyznaczenie koszt\'f3w produkcji\par
lepsze wykorzystanie posiadanej infrastruktury (magazyn\'f3w, mo\'bfliwo\'9cci wytw\'f3rczych)\par
szybsze reagowanie na zmiany zachodz\'b9ce w otoczeniu\par
kontrola realizacji poszczeg\'f3lnych etap\'f3w produkcji\par
d) W 1983 na podstawie MRP powsta\'b3 MRPII, kt\'f3ry zosta\'b3 rozbudowany o planowanie zdolno\'9cci produkcyjnych (CRP) oraz o elementy zwi\'b9zane z procesem sprzeda\'bfy i wspieraj\'b9ce podejmowanie decyzji na szczeblach strategicznego zarz\'b9dzania produkcj\'b9. Poza materia\'b3ami zwi\'b9zanymi bezpo\'9crednio z produkcj\'b9, MRP II uwzgl\'eadnia tak\'bfe materia\'b3y pomocnicze, zasoby ludzkie, pieni\'b9dze, czas, \'9crodki trwa\'b3e i inne.\par
e) W latach dziewi\'ea\'e6dziesi\'b9tych systemy MRP i MRPII wyewoluowa\'b3y w system ERP, kt\'f3ry by\'b3 zbiorem wielu modu\'b3\'f3w, a jego podstawowym elementem jest wsp\'f3lna baza danych.\par
Poszczeg\'f3lne modu\'b3y systemu ERP obejmuj\'b9 nast\'eapuj\'b9ce obszary:\par
//znowu punkty\par
    magazynowanie;\par
    zarz\'b9dzanie zapasami;\par
    \'9cledzenie realizowanych dostaw;\par
    planowanie produkcji;\par
    zaopatrzenie;\par
    sprzeda\'bf;\par
    zarz\'b9dzanie relacjami z klientami;\par
    ksi\'eagowo\'9c\'e6;\par
    finanse;\par
    zarz\'b9dzanie zasobami ludzkimi (p\'b3ace, kadry).\par
W sk\'b3ad system\'f3w ERP mog\'b9 wchodzi\'e6 r\'f3wnie\'bf inne modu\'b3y, jak np. modu\'b3 zarz\'b9dzania transportem, controlling, czy zarz\'b9dzanie projektami. Systemy ERP umo\'bfliwiaj\'b9 dopasowanie ich do specyfiki poszczeg\'f3lnych przedsi\'eabiorstw, m.in. dlatego, i\'bf poszczeg\'f3lne modu\'b3y mog\'b9 by\'e6 wzajemnie niezale\'bfne od siebie (tzn. mog\'b9 pracowa\'e6 bez obecno\'9cci innych modu\'b3\'f3w). Systemy te zazwyczaj pozwalaj\'b9 te\'bf na ustalenie uprawnie\'f1 dost\'eapu dla poszczeg\'f3lnych u\'bfytkownik\'f3w.\par
\par
\b\fs40 2. \'8crodowisko//uzupe\'b3ni\'e6\par
\b0\fs22 1. MySQL Workbench\par
2. Netbeans\par
//tu b\'eadzie koniec wst\'eapu i sie zacznie w\'b3a\'9cciwa dokumentacja zaczynaj\'b9c od technicznej\par
\b\fs40 3. Dokumentacja techniczna\par
\b0\fs22 Klasy:\par
1.  Category - odpowiedzialna za przechowywanie w polu 'name' kategorii produktu. Pole id odnosi si\'ea do pola o tej samej nazwie  w klasie Product. Zabieg ten pozwala na unikni\'eacie redundancji w bazie danych. Kategoryzowanie produkt\'f3w pozwala na \'b3atwiejsze ich wyszukiwanie, zamawianie i sprzeda\'bf.\par
public class Category \{\par
    private int id;\par
    private String name;\par
\}\par
2. Email - pozwala na tworzenie, wysy\'b3anie i odbieranie wiadomo\'9cci mi\'eadzy u\'bfytkownikami systemu. Pole 'id_sender' zawiera id nadawcy, 'id_receiver' - id odbiorcy. 'Text' przechowuje tre\'9c\'e6 wiadomo\'9cci, 'date' - dok\'b3adn\'b9 dat\'ea wys\'b3ania wiadomo\'9cci. Warto\'9c\'e6 'checked' informuje program czy dana wiadomo\'9c\'e6 zosta\'b3a ju\'bf kiedy\'9c odczytana.\par
public class Email \{\par
    private int id;\par
    private int id_sender;\par
    private int id_receiver;\par
    private String text;\par
    private Timestamp date;\par
    private boolean checked;\par
\}\par
3. Employee - ka\'bfdy obiekt tej klasy odwzorowuje jednego pracownika/u\'bfytkownika systemu przechowuj\'b9c jego dane takie jak imie, nazwisko, email, zaszyfrowane has\'b3o oraz pozycj\'ea w firmie, kt\'f3ra to z kolei jest pobierana z bazy za po\'9crednictwem kolumny 'id_position'. U\'bfytkownik loguj\'b9c si\'ea informuje system o swojej obecno\'9cci, a ka\'bfdy jego ruch jest odnotowany za po\'9crednictwem pola 'id'.\par
public class Employee \{\par
    private int id;\par
    private String name;\par
    private String full_name;\par
    private String email;\par
    private String password;\par
    private String position;\par
   \}\par
\par
4. Log - dostarcza dok\'b3adniejszych informacji na temat realizowania zam\'f3wie\'f1. Dzi\'eaki niej u\'bfytkownik mo\'bfe si\'ea dowiedzie\'e6 kiedy z\'b3o\'bfono zam\'f3wienie lub kiedy je przyj\'eato. \par
public class Log \{\par
    private int id;\par
    private int id_object;\par
    private Timestamp date;\par
    private String action;\par
\}\par
\par
5.Order - obiekty tej klasy s\'b3u\'bf\'b9 g\'b3\'f3wnie do przechowywania listy zamawianych produkt\'f3w ('list'). Opr\'f3cz tego zawieraj\'b9 informacj\'ea o tym kto je zam\'f3wi\'b3('id_employee'), kiedy('date'), czy przyj\'eato dostaw\'ea('executed')  i ile wynosi\'b3y koszty('price'). Informacja o produktach z listy jest pobierana z bazy jako obiekt typu String, kt\'f3ry jest przetwarzany na list\'ea za pomoc\'b9 specjalnego algorytmu, kt\'f3ry zostanie om\'f3wiony p\'f3\'9fniej.\par
public class Order \{\par
    private int id;\par
    private int id_employee;\par
    private Timestamp date;\par
    private List<Product> list;\par
    private boolean executed;\par
    private Double price;\par
\}\par
\par
6. PdfFiles - klasa kt\'f3rej zadaniem jest generowanie pliku .Pdf zawieraj\'b9cego faktur\'ea w formie tabeli wraz z \'b3\'b9czn\'b9 cen\'b9 i dat\'b9. Zawiera ona nast\'eapuj\'b9ce metody: //doko\'f1czyc bo trzewba klase przebudowa\'e6\par
\lang1033\f1 public static void createPdf(java.util.List<Product> selling_list)\lang1045\f0  - tworzy pe\'b3ny dokument.\par
public static void addTitlePage(Document document) - dodaje nag\'b3\'f3wek do dokumentu, kt\'f3ry zawiera m. in. bie\'bf\'b9c\'b9 dat\'ea.\par
private static void addEmptyLine(Paragraph paragraph, int number) - dodaje do paragrafu puste linie w ilo\'9cci podanej w drugim argumencie.\par
private static void createTable(Document document,java.util.List<Product> selling_list) - najwa\'bfniejsza metoda, kt\'f3ra generuje g\'b3\'f3wn\'b9 tabel\'ea z produktami i cen\'ea na podstawie podanej listy produkt\'f3w.\par
7. Position - klasa podobna do Category z t\'b9 r\'f3\'bfnic\'b9 \'bfe przechowuje pe\'b3n\'b9 nazw\'ea stanowiska pracownika do kt\'f3rego pracownik odwo\'b3uje si\'ea za pomoc\'b9 odpowiedniego pola.\par
 public class Position \{\par
    private int id;\par
    private String name;\par
\}\par
\par
8. Product - klasa przechowuj\'b9ca dane na temat produktu takie jak m. in. nazwa('name'), cena detaliczna('retail_price'), VAT('vat'), kategoria('category') oraz ilo\'9c\'e6 na magazynie('quantity').\par
public class Product \{\par
    private int id;\par
    private String name;\par
    private Double retail_price;\par
    private Double vat;\par
    private String category;\par
    private int quantity;\par
\}\par
\par
9. Repair - obiekt tej klasy odzwierciedla z\'b3o\'bfone przez klienta zam\'f3wienie na napraw\'ea sprz\'eatu. Zawiera ono informacj\'ea o pracowniku przyjmuj\'b9cym('id'), imi\'ea i nazwisko klienta('client_name', 'client_full_name'), opis problemu('description'), dat\'ea z\'b3o\'bfenia zam\'f3wienia('date')  oraz informacj\'ea o tym czy zam\'f3wienie zosta\'b3o wykonane i jest gotowe do odbioru('executed').\par
public class Repair \{\par
    private int id;\par
    private int id_employee;\par
    private String client_name;\par
    private String client_full_name;\par
    private String description;\par
    private Timestamp date;\par
    private boolean executed;\par
\}\par
\par
10. Function - g\'b3\'f3wna klasa, kt\'f3ra jest swoist\'b9 bibliotek\'b9 funkcyjn\'b9. Obiekt tej klasy gwarantuje dost\'eap do wszelkich niezb\'eadnych metod u\'bfywanych w aplikacji. Zawiera pole typu Connection dzi\'eaki kt\'f3remu konstruktor automatycznie tworzy po\'b3\'b9czenie z baz\'b9 danych wykorzystuj\'b9c do tego informacje zawarte w zewn\'eatrznym pliku DBInfo.properties. Pola 'ALGORITHM' i 'keyValue' u\'bfywane s\'b9 w funkcjach szyfruj\'b9cych.\par
public class Function \{\par
    Connection myConn = null;\par
    private static final String ALGORITHM = "AES";\par
    private static final byte[] keyValue\par
            = new byte[]\{'T', 'h', 'i', 's', 'I', 's', 'A', 'S', 'e', 'c', 'r', 'e', 't', 'K', 'e', 'y'\};\par
\}\par
Do klasy Function nale\'bf\'b9 nast\'eapuj\'b9ce funkcje:\par
public String encrypt(String valueToEnc) - szyfruje podany jako argument ci\'b9g znak\'f3w.\par
public String decrypt(String encryptedValue) - deszyfruje ci\'b9g znak\'f3w.\par
private static Key generateKey() - pomocnicza metoda tworz\'b9ca klucz niezb\'eadny do szyfrowania i odszyfrowywania.\par
private Employee convertRowToEmployee(ResultSet rs) - przetwarza wynik zapytania do bazy na obiekt typu Employee.\par
public String getPosition(int index) - zwraca nazw\'ea stanowiska na podstawie podanego indeksu.\par
public List<Employee> getAllEmployees() - pobiera z bazy wszystkich pracownik\'f3w i zwraca ich w formie listy.\par
private Email convertRowToEmail(ResultSet rs) - przetwarza wynik zapytania do bazy na obiekt typu Email.\par
public List<Email> getAllEmails() - pobiera z bazy wszystkie wiadomo\'9cci email i zwraca je w formie listy.\par
private Repair convertRowToRepair(ResultSet rs) - przetwarza wynik zapytania do bazy na obiekt typu Repair.\par
public List<Repair> getAllRepairs() - pobiera z bazy wszystkie formularze naprawy i zwraca je w formie listy.\par
private Product convertRowToProduct(ResultSet rs) - przetwarza wynik zapytania do bazy na obiekt typu Product.\par
public String getCategory(int index) - zwraca nazw\'ea kategorii na podstawie podanego indeksu.\par
public List<Product> getAllProducts() - pobiera z bazy wszystkie produkty i zwraca je w formie listy.\par
public List<Product> convertStringCodeToProductsList(String string) - metoda, kt\'f3ra przetwarza ci\'b9g znak\'f3w na list\'ea produkt\'f3w. // tutaj da\'e6 przyk\'b3ad i wyja\'9cnienie albo ni\'bfej. jeszcze sie pomysli.\\\par
private Product getProductById(int id) - pobiera z bazy danych produkt o podanym id.\par
private Order convertRowToOrder(ResultSet rs) - przetwarza wynik zapytania do bazy na obiekt typu Order.\par
public List<Order> getAllOrders() - pobiera z bazy wszystkie zam\'f3wienia produkt\'f3w i zwraca je w formie listy.\par
public Employee getEmployeeById(int id) - pobiera z bazy danych u\'bfytkownika o podanym id.\par
public void fillComboboxWithEmployees(JComboBox<Employee> combobox) - czy\'9cci comboboxa i wype\'b3nia go pobranymi z bazy danych pracownikami.\par
public void addEmail(Email temp) - dodaje do bazy now\'b9 wiadomo\'9c\'e6 mailow\'b9.\par
void fillComboboxWithEmployeesWithoutUser(JComboBox combobox, Employee user) - czy\'9cci comboboxa i wype\'b3nia go pobranymi z bazy danych pracownikami za wyj\'b9tkiem jednego podanego w argumencie.\par
public List<Email> getAllEmailsForUser(Employee user) - pobiera z bazy wszystkie wiadomo\'9cci email adresowane dla podanego u\'bfytkownika i zwraca je w formie listy.\par
public void addRepair(Repair temp) - dodaje do bazy nowy formularz naprawy.\par
public void setEmailChecked(Email email) - oznacza podany email jako przeczytany.\par
public void fillTableWithEmailsForUser(JTable jTableMailbox, Employee user) - wype\'b3nia tabel\'ea wiadomo\'9cciami email adresowanymi do podanego u\'bfytkownika.\par
public boolean thereIsNewMail(Employee user) - sprawdza czy dla podanego u\'bfytkownika istnieje nieprzeczytany jeszcze mail.\par
public void fillTableWithRepairs(JTable jTableRepairs) - wype\'b3nia podan\'b9 tabel\'ea formularzami napraw.\par
public void setRepairExecuted(Repair temp) - oznacza podany formularz naprawy jako wykonany.\par
public void fillTableWithAllProducts(JTable jTableProducts) -  wype\'b3nia podan\'b9 tabel\'ea wszystkimi produktami bez wzgl\'eadu na kategorie.\par
public List<Product> getFoodProducts() - pobiera z bazy produkty z kategorii 'Jedzenie' i zwraca je w formie listy.\par
public void fillTableWithFoodProducts(JTable jTableProducts) -  wype\'b3nia podan\'b9 tabel\'ea tylko produktami z kategorii 'Jedzenie'.\par
public List<Product> getPartsProducts() - pobiera z bazy wszystkie produkty z wyj\'b9tkiem tych z  kategorii 'Jedzenie' i zwraca je w formie listy.\par
public void fillTableWithPartsProducts(JTable jTableProducts) - wype\'b3nia podan\'b9 tabel\'ea wszystkimi produktami z wyj\'b9tkiem tych z kategorii 'Jedzenie'.\par
public List<Product> searchPartsProducts(String name) - zwraca list\'ea Produkt\'f3w  z wyj\'b9tkiem tych z  kategorii 'Jedzenie' i tych kt\'f3re w nazwie zawieraj\'b9 podany wzorzec.\par
public void fillTableWithPartsProducts(JTable jTableProducts,String name) - wype\'b3nia podan\'b9 tabel\'ea wszystkimi produktami z wyj\'b9tkiem tych z kategorii 'Jedzenie' kt\'f3re pasuj\'b9 do podanego wzorca.\par
public void removeColumn(JTable table, int x) - usuwa z podanej tabeli columne o numerze x.\par
public void selectColumns(JTable jTableFoodOrdered, JTable jTableFoodToOrder) - pomocnicza funkcja, kt\'f3ra dostosowywuje podane tabele usuwaj\'b9c niepotrzebne kolumny.\par
void refreshOrderedFood(JTable jTableFoodOrdered, List<Product> ordered_list) - od\'9cwie\'bfa podan\'b9 tabel\'ea wype\'b3niaj\'b9c j\'b9 na nowo produktami z listy.\par
public boolean containsProductID(List<Product> ordered_list, Product temp) - sprawdza czy w li\'9ccie istnieje ju\'bf produkt o podanym id.\par
\lang1033\f1\par
}
 